dim(d)
dim(NA)
dim(1)
if (NULL) print("2")
length(dim(d))
dim(c(1:2))
dim(c(1:2))[2]
dim(c(1:2))[1]
help(as.list)
as.list(diag(1:5))
as.list(c(1:4))
ncol(c(1:4))
help(lapply)
as.list(c(1:4),c(2:5))
list()
list() ->
list() ->b
list() ->b
b
b[[1]] -> c(1:6)
b[[1]] <- c(1:6)
b[[2]] <- c(2:7)
lapply(b, as.matrix)
lapply(b, as.matrix) -> e
for(j in e) j
for(j in e) print(j)
as.matrix(c(1:6))
as.matrix
as.matrix(c(1:6))sdf
b
length(b)
rows
cind(diag(1:5),diag(1:5))
cbind(diag(1:5),diag(1:5))
f <- function(..., b) b
f(b=2)
index(c(1:6))
c(1:100) ->a
index(a) <- c(101:200)
get.hist.quote("SPY")
get.hist.quote("SPY")->a
as.matrix(a)
index(as.matrix(a))
source("utils.r")
cleanse(c(1:10),c(2:5))
cleanse(c(1:10),c(2:5),c(3:100))
cleanse(c(1:10),c(2:5),c(3:100))
spy <- get.hist.quote("SPY", start="2011-01-01")
qqq <- get.hist.quote("QQQ", start="2012-01-01")
aapl <- get.hist.quote("AAPL", start="2012-01-01")
aapl <- get.hist.quote("AAPL", start="2011-05-01")
cleanse(spy,qqq,aapl,method="match")
cleanse(spy,qqq,aapl, method="match")
sum
cleanse(spy,qqq,aapl)
cleanse(spy,qqq,aapl, method="match")
cleanse(a=spy,b=qqq,c=aapl, method="match")
cleanse(spy,qqq,aapl, method="trunctuate")
cleanse(spy,qqq,aapl, method="trdf")
cleanse(spy,qqq,aapl, method="match")
source("utils.r")
cleanse(spy,qqq,aapl, method="matchindex")
source("utils.r")
cleanse(spy,qqq,aapl, method="matchindex")
cleanse(spy,qqq,aapl, method="matchindexsfsaf")
cleanse(spy,qqq,aapl, method="trunctuate")
cleanse(spy,qqq,aapl, method="trunctuatse")
source("utils.r")
cleanse(spy,qqq,aapl)
cleanse(spy,qqq,aapl)
cleanse(spy,qqq,aapl,method="s")
cleanse(spy,qqq,aapl)
f
f(1,2)
f(1,2,b=2)
f(1,2,b=3)
f <- function(...) list(...)
f(a=1)
b
index(b)
source("utils.r")
cleanse(spy,qqq,aapl)
cleanse(spy,qqq,aapl,method="sf")
source("utils.r")
cleanse(spy,qqq,aapl,method="sf")
source("utils.r")
cleanse(spy,qqq,aapl,method="sf")
f
index(f(1,2,3,method="sfs"))
names(f(1,2,3,a="s"))
source("utils.r")
cleanse(spy,qqq,aapl,method="sf")
row.names(spy)
rownames(spy)
diag(1:5) ->b
b
b[2,3] <- NA
b
clean.matrix(b)
help(stop)
source("utils.r")
cleanse(spy,qqq,aapl,method="sf")
cleanse(spy,qqq,aapl,method="match")
cleanse(spy,qqq,aapl,method="match")
help(save)
help(load)
help(file.path)
source(utils.r)
source("utils.r")
cache(aapl)
cache("aapl")
??file
cache("aapl")
source("utils.r")
cache.get("aapl")
help("dir")
??file
help(dir.create)
??dir
list.dirs
list.dirs()
"./cache"
class(list.dirs())
dir.create("cache")
ls.dir()
list.dir()
list.dirs()
file.patch("cache", c("1","2"))
file.path("cache", c("1","2"))
$
library("fgui")
fgui("cache")
??fgui
gui(cache)
help(export)
??export
sweep
?sweep
install.packages("plyr")
A <- array(1:24, dim = 4:2)
A
sweep(A, 1, 5)
??plyr
library(help="plyr")
source("utils.r")
doc(plyr)
deparse(substitute(a))
doc(plyr)
deparse(substitute(a))
source("utils.r")
doc(plyr)
source("utils.r")
doc(a)
doc(asdfasf)
class(doc(asdfasf))
library(help=plyr)
source("utils.r")
doc(plyr)
as.name
as.name(plyr)
source("utils.r")
doc(plyr)
source("utils.r")
doc(plyr)
source("utils.r")
doc(plyr)
?enviroument
?environment
?assign
get("plyr")
get("A")
library(help=get("plyr"))
library
substitute(help)
library(help=substitute(help))
eval
?eval
source("utils.r")
doc(plyr)
doc(plyr)
eval(doc(plyr))
eval(doc(plyr), ebv=.GlobalEnv)
eval(doc(plyr), env=.GlobalEnv)
?do.call
eval(doc(plyr), env=.GlobalEnv)->z
z
do.call(library, help=plyr)
do.call(library, help=plyr)
??do
?do
do.call(library, help=plyr)
?do.call
do.call(library, help=plyr, quote=T)
do.call(library, plyr, quote=T)
do.call(library, list(help="plyr"), quote=T)
do.call(library, list(help="plyr"), quote=F)
source("utils.r")
doc(plyr)
install.packages("reshape")
doc(reshape)
?melt
library(reshape)
melt
?melt
doc
tips
melt(tips)
tips
melt(tips)
class(tips)
tips[1:10,]->a
a
metl(a)
melt(a)
melt(a, id.vars=sex)
melt(a, id.vars="sex")
a$id <- rownames(a)
a
melt(a, id.vars="id")
?cast
cast(melt(a, id.vars="id"))
?condense.df
condense.df(a)
condense.df(a, "id")
condense.df(a, "id", function(x) x)
?rename
a
aparseby
?sparseby
sparseby(a, c(1,2))
sparseby(a, c(1,2), nrow)
sparseby(a, list(1,2), nrow)
sparseby(a, list(id=1), nrow)
x <- data.frame(index=c(rep(1,4),rep(2,3)),value=c(1:7))
x
sparseby(x,x$index,nrow)
?by
?tapply
'doc()'
doc(base)
as.n("1")
install.packages("cluster","fImport")
?install.packages
library()
data()
install.packages("fTrading")
library("fTrading")
?emcTA
setwd("~/dev/R/Finance/CreditMetrics/")
intall.packages("ggplot2")
install.packages("ggplot")
source("example.r")
do.call(credit.metrics, bond1)
source("example.r")
do.call(credit.metrics, bond1)
source("example.r")
do.call(credit.metrics, bond1)
source("example.r")
do.call(credit.metrics, bond1)
source("example.r")
do.call(credit.metrics, bond1)
pv(rep(1,10), rep(0,10))
pv(c(rep(1,10), 100), rep(0,11))
CM_FZC[1,]
CM_FZC[1,]->tmp
(tmp+1)^(c(1:4))
(tmp+1)^(-c(1:4))
cf <- c(rep(5,4), 105)
cf
(tmp+1)^(-c(1:4)) -> df
df
df * cf
c(1, df) * cf
sum(c(1, df) * cf)
pv(cf, c(1,df))
cf
df
tmp
tmp <- c(0, tmp)
pv(cf, tmp)
(1+tmp)^(c(1:5))
source("example.r")
do.call(credit.metrics, bond1)
do.call(credit.metrics, bond1) -> z
barplot(z$probs)
?qplot
qplot(z$probs)
qplot(z$probs)
z$probs ->b
qplot(factory(b), data=z)
qplot(factory(b), data=b)
qplot(y=b)
qplot(y=b, geom="bar")
qplot(x=CM_grades, y=b, geom="bar")
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b))
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b))
b <- z$Value
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b))
CM_grades
CM_grades
qplot(x=CM_grades, y=b, geom="path", fill=factor(b))
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b))
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b), sort=F)
qplot(x=CM_grades, y=b, geom="bar", fill=factor(b))
?reorder
index(b)
qplot(x=reorder(CM_grades, index(b)), y=b, geom="bar", fill=factor(b))
z
as.table(z)
d <- data.frame()
d$Value <- z$value
d$probs <- z$probs
d$probs <- z$probs
d$Value <- z$value
d
?data.frame
source("example.r")
source("example.r")
Value
plot(Probs., Value)
plot(Value, Probs.)
qplot(x=reorder(Value, Probs.), y=Probs.)
qplot(x=reorder(Value, Value), y=Probs.)
qplot(x=reorder(Value, Value), y=Probs., geom="bar")
ecdf
??ecdf
?cdf
?ecdf
ecdf(Value)
attributes(ecdf(Value))
rep(1,10, by=2)
seq(1,10, by=2)
round(1.2)
sum(Probs.)
source("example.r")
source("example.r")
.max
.min
(.max-.min
)
bins
(.max-.min)/nbins
seq(.min:.max)
seq(.min:.max, by=6)
?sep
?seq
seq(.min:.max, length.out=nbins)
nbins
source("example.r")
.by
seq(1:3,by=2)
seq(1:3,by=1)
seq(1:10,by=1)
seq(1:10,by=2)
seq(1,10,by=2)
seq(.min, .max, by=.by)
source("example.r")
bins
plot(Prob, bins)
plot(bins, Prob)
c(1:10)[-1]
source("example.r")
plot(bins,PDFProb)
plot(bins,CDFProb)
plot(bins,PDFProb)
CDFProb
Value
bins
for(bin in bins){print(bin)}
for(bin in bins){print(which(Value<=bin))}
Probs.
Probs.[64]
source("example.r")
plot(bins, PDFProb)
Probs.
Probs.[1]
Probs.[56,64]
Probs.[c(56,64)]
Probs.[56]
Probs == 0
plot(Value, Probs.)
source("example.r")
PDFProb
plot(bins,PDFProb)
barplot(bins,PDFProb)
barplot(PDFProb)
unique(Value)
sort(unique(Value))
source("example.r")
barplot(PDFProb)
source("example.r")
barplot(PDFProb)
barplot(CDFProb)
sort(Value, index.return=T)
source("example.r")
plot(Value,Probs.)
tail(c(1:10), 1)
source("example")
source("example.r")
CDF(100)
CDF(200)
CDF(220)
CDF(211)
?apply
array(Probs.)
pascal
pascal(1)
?pascal
pascal(5)
??uppper.tri
??upper.tri
?upper.tri
x <- matrix(rep(0,s))
source("example.r")
source("example.r")
m
source("example.r")
m
source("example.r")
m
n
source("example.r")
m
source("example.r")
m
source("example.r")
Probs.cumu
Probs.
Plot(Probs.cumu)
plot(Probs.cumu)
plot(Value,Probs.cumu)
plot(Value,Probs.cumu, type="l")
plot(Value,Probs.cumu, type="l")
VAR
Var
this
source("example.r")
.Var(0.01)
source("example.r")
.Var(0.01)
source("example.r")
.Var(0.01)
Probs.cumu[14]
Probs.cumu[13]
source("example.r")
Portfolio.Value.mean
Portfolio.Value.adjStd
Value.var
CM.bond1
CM.bond2
0.2686^2
0.2686^2*0.01
source("example.r")
Value.var
source("example.r")
Value.mean
CM.bond2
help(var)
attach(CM.bond2)
detach("CM.bond2")
v <- CM.bond2$Value
p <- CM.bond2$probs
sum(v*p)
sum(v*p)->mv
sum((v-mv)^2*p)
source("example.r")
CM.bond1
CM.bond2
26^2*0.01
bond1$par
Portfolio.Value.adjStd
Portfolio.Value.mean
?pnorm
pnorm(1)
pnorm(0.01)
qnorm(0.01)
qnorm(0.5)
qnorm(0.01)
source("example.r")
.nVar(0.01)
.Var(0.01)
.Var(0.05)
.nVar(0.05)
Portfolio.Value.mean
CM.bond1
CM.bond2
Portfolio.Value.mean
Portfolio.Value.adjStd
qnorm(0.01)
qnorm(0.05)
.nVar(.01)
.nVar(.05)
.var(.01)
.Var(.01)
.Var(.05)
x
y
x<- c()
source("example.r")
plot(x,y)
x
y
y < Inf
source("example.r")
plot(x,y)
x
y
y<Inf
source("example.r")
plot(x,y)
source("example.r")
plot(x,y)
